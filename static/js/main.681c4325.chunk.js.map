{"version":3,"sources":["redux/reducers/counter.tsx","redux/reducers/index.tsx","redux/actionTypes.tsx","redux/store.tsx","component/Counter.tsx","redux/actions.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","count","rootReducer","combineReducers","counter","state","action","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","useStyles","makeStyles","theme","createStyles","root","textAlign","button","margin","spacing","Counter","useSelector","dispatch","useDispatch","classes","className","Button","variant","color","onClick","App","prefersDarkMode","useMediaQuery","createMuiTheme","palette","primary","main","lightBlue","A400","secondary","pink","A200","ThemeProvider","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAEMA,EAAe,CACjBC,MAAO,GCAEC,EAAcC,YAAgB,CAAEC,QDG9B,WAA6D,IAAnDC,EAAkD,uDAA1CL,EAAcM,EAA4B,uCACvE,OAAQA,EAAOC,MACX,IERiB,YFSb,MAAO,CACHN,QAASI,EAAMJ,OAGvB,IEZiB,YFab,MAAO,CACHA,QAASI,EAAMJ,OAGvB,QACI,OAAOI,MGVbG,EAAmBC,OAAOC,sCAAwCC,IAGzDC,EAFDC,YAAYX,EAAaM,K,wBCHjCM,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,UAAW,UAEfC,OAAQ,CACJ,QAAS,CACLC,OAAQL,EAAMM,QAAQ,UAsBvBC,EAhBW,WACtB,IAAMtB,EAAQuB,aAA+B,SAAAnB,GAAK,OAAIA,EAAMD,QAAQH,SAC9DwB,EAAWC,cACXC,EAAUb,IAEhB,OACI,uBAAKc,UAAWD,EAAQT,MACpB,0BAAKjB,GACL,uBAAK2B,UAAWD,EAAQP,QACpB,gBAACS,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAUC,QAAS,kBAAMP,EC3B1C,CAC5BlB,KHHqB,gBE6BT,aACA,gBAACsB,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,YAAYC,QAAS,kBAAMP,ECxB5C,CAC5BlB,KHNqB,gBE6BT,gB,gDEFD0B,EAvBO,WACpB,IAAMC,EAAkBC,YAAc,gCAEhCnB,EAAQoB,YAAe,CAC3BC,QAAS,CACP9B,KAAM2B,EAAkB,OAAS,QACjCI,QAAS,CACPC,KAAMC,IAAUC,MAElBC,UAAW,CACTH,KAAMI,IAAKC,SAKjB,OACE,gBAACC,EAAA,EAAD,CAAe7B,MAAOA,GACpB,gBAAC8B,EAAA,EAAD,MACA,gBAAC,EAAD,QCXcC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUzC,MAAOA,GACf,kBAAC,EAAD,QAGJ0C,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.681c4325.chunk.js","sourcesContent":["import { INCREMENT, DECREMENT, CounterActionTypes } from './../actionTypes';\n\nconst initialState = {\n    count: 0,\n}\n\nexport default function (state = initialState, action: CounterActionTypes) {\n    switch (action.type) {\n        case INCREMENT: {\n            return {\n                count: ++state.count,\n            };\n        }\n        case DECREMENT: {\n            return {\n                count: --state.count,\n            };\n        }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport counter from './counter';\n\nexport const rootReducer = combineReducers({ counter: counter });\nexport type RootState = ReturnType<typeof rootReducer>\n","export const INCREMENT = \"INCREMENT\";\nexport const DECREMENT = \"DECREMENT\";\n\ninterface IncrementAction {\n    type: typeof INCREMENT,\n};\n\ninterface DecrementAction {\n    type: typeof DECREMENT,\n};\n\nexport type CounterActionTypes = IncrementAction | DecrementAction;","import { createStore, compose } from 'redux';\nimport { rootReducer } from './reducers';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers())\n\nexport default store;","import * as React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { increment, decrement } from './../redux/actions';\nimport { RootState } from './../redux/reducers/index';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            textAlign: 'center',\n        },\n        button: {\n            '& > *': {\n                margin: theme.spacing(1),\n            },\n        },\n    }),\n);\n\nconst Counter: React.FC = () => {\n    const count = useSelector<RootState, number>(state => state.counter.count);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <h1>{count}</h1>\n            <div className={classes.button}>\n                <Button variant=\"outlined\" color=\"primary\" onClick={() => dispatch(increment())} >INCREMENT</Button>\n                <Button variant=\"outlined\" color=\"secondary\" onClick={() => dispatch(decrement())} >DECREMENT</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default Counter;","import { INCREMENT, DECREMENT } from './actionTypes';\n\nexport const increment = () => ({\n    type: INCREMENT,\n})\n\nexport const decrement = () => ({\n    type: DECREMENT,\n})","import * as React from 'react';\nimport Counter from './Counter';\nimport { CssBaseline, createMuiTheme, ThemeProvider, useMediaQuery } from \"@material-ui/core\";\nimport { lightBlue, pink } from '@material-ui/core/colors';\n\nconst App: React.FC = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = createMuiTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light',\n      primary: {\n        main: lightBlue.A400,\n      },\n      secondary: {\n        main: pink.A200,\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Counter />\n    </ThemeProvider>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}